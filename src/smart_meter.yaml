esphome:
  name: smartmeter
  includes: 
    - sunspec_meter_model.h
    - modbus_server.h
    - smart_meter.h
  on_boot:
    # Init digital outputs at a early stage
    priority: 400
    then:
      - lambda: |-
          // Enable 5V output voltage, otherwise 1.7V at MAX 13487E
          id(cgq5VPower_en).turn_on();
          // # MAX 13487E - endable AutoDirection circuit
          id(rs485_en).turn_on();
          // # MAX 13487E - disable shutdown
          id(rs485_se).turn_on();
          ESP_LOGI("sm", "RS485 initialized.");

esp32:
  board: esp32dev
  framework:
    type: arduino

preferences:
  flash_write_interval: 28d

# Enable logging
logger:
  level: DEBUG

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  # 192.168.4.1
  ap:
    ssid: "Smart-Meter Fallback Hotspot"
    password: !secret ap_password

captive_portal:
    
web_server:
  port: 80

uart:
 id: uart_modbus
 tx_pin: 22
 rx_pin: 21
 baud_rate: 115200
 stop_bits: 1
 rx_buffer_size: 1024
#  debug:
 
output:
# to enable RS485 chip and 5V power
  - platform: gpio
    pin: 16
    id: cgq5VPower_en
  - platform: gpio
    pin: 17
    id: rs485_en
  - platform: gpio
    pin: 19
    id: rs485_se

light:
  - platform: neopixelbus
    name: "NeoPixel Led"
    id: status_led
    internal: true
    type: GRB
    variant: WS2812
    pin: 04
    num_leds: 1
    default_transition_length: 0s

sensor:
  - platform: wifi_signal
    name: "5.0 WiFi Signal Stärke"
    update_interval: 3s
    filters:
      - median:
          window_size: 5
          send_every: 3
          send_first_at: 1

  - platform: custom
    sensors:
    - name: "SmartMeter"
      id: smart_meter
      internal: true
    # "name" order must match the GetSensors() - m_queries
  #   - name: "4.1 Aussen Temperatur"
  #   - name: "4.2 Warmwasser Temperatur"
  #   - name: "4.3 Mischer Soll Temperatur"
  #   - name: "4.4 Mischer Temperatur"
  #   - name: "4.5 Wp Vorlauf Temperatur"
  #   - name: "4.6 Rücklauf Temperatur"
  #   - name: "4.7 El Verbrauch WW"
  #   - name: "4.8 El Verbrauch Heizen"
    lambda: |-
      auto sm = new sm::SmartMeter(id(uart_modbus));
      App.register_component(sm);
      return sm->GetSensors();
